<!doctype html>
<html class="no-js" lang="{{ shop.locale }}" {% if settings.enable_rtl %}dir="rtl"{% endif %}>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta http-equiv="Content-Security-Policy" content="default-src 'self' https: data: 'unsafe-inline' 'unsafe-eval'; img-src 'self' https: data: blob: cdn.shopify.com *.cloudfront.net; script-src 'self' 'unsafe-inline' 'unsafe-eval' cdn.shopify.com *.jquery.com cdnjs.cloudflare.com *.google-analytics.com *.googleapis.com *.facebook.net *.cloudflare.com; style-src 'self' 'unsafe-inline' fonts.googleapis.com cdn.shopify.com *.cloudfront.net; font-src 'self' fonts.gstatic.com data: *.cloudfront.net; connect-src 'self' *.shopify.com *.google-analytics.com *.facebook.com wss://*.shopify.com; frame-src 'self' https: accounts.google.com *.facebook.com *.youtube.com;">
    <meta http-equiv="X-Frame-Options" content="SAMEORIGIN">
    <meta http-equiv="X-Content-Type-Options" content="nosniff">
    <meta http-equiv="X-XSS-Protection" content="1; mode=block">
    <meta http-equiv="Permissions-Policy" content="interest-cohort=(),microphone=(),camera=(),geolocation=()">
    <meta http-equiv="Referrer-Policy" content="strict-origin-when-cross-origin">
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover">
    <meta name="theme-color" content="{{ settings.color_accent | default: '#000000' }}">
    <!-- Image optimization hints -->
    <meta name="image-rendering" content="optimizeQuality">
    
    <!-- Resource hints for better performance -->
    <link rel="preconnect" href="{{ shop.secure_url }}" crossorigin>
    <link rel="dns-prefetch" href="{{ shop.secure_url }}">
    {% if template == 'product' %}
      <link rel="prerender" href="{{ product.selected_or_first_available_variant.url }}">
    {% endif %}
    {% if template == 'collection' and collection.next_product %}
      <link rel="prefetch" href="{{ collection.next_product.url }}">
    {% endif %}
    
    <!-- Preconnect to external domains for better performance -->
    <link rel="preconnect" href="https://fonts.googleapis.com" crossorigin>
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="preconnect" href="https://cdnjs.cloudflare.com" crossorigin>
    <link rel="preconnect" href="https://cdn.shopify.com" crossorigin>
    
    <!-- DNS prefetch for third-party services -->
    <link rel="dns-prefetch" href="//www.katapult.com">
    <link rel="dns-prefetch" href="//cloud.umami.is">
    
    <link rel="canonical" href="{{ canonical_url }}">
    
    {%- if settings.favicon != blank -%}
      <link rel="icon" type="image/png" href="{{ settings.favicon | img_url: '32x32' }}">
      <link rel="apple-touch-icon" href="{{ settings.favicon | img_url: '180x180' }}">
    {%- endif -%}

    {%- capture seo_title -%}
      {{ page_title }}
      {%- if current_tags -%}
        {%- assign meta_tags = current_tags | join: ', ' -%} &ndash; {{ 'general.meta.tags' | t: tags: meta_tags -}}
      {%- endif -%}
      {%- if current_page != 1 -%}
        &ndash; {{ 'general.meta.page' | t: page: current_page }}
      {%- endif -%}
      {%- assign escaped_page_title = page_title | escape -%}
      {%- unless escaped_page_title contains shop.name -%}
        &ndash; {{ shop.name }}
      {%- endunless -%}
    {%- endcapture -%}
    <title>{{ seo_title | strip }}</title>

    {%- if page_description -%}
      <meta name="description" content="{{ page_description | escape }}">
    {%- endif -%}

    <!-- Enhanced Social Media Meta Tags -->
    <meta property="og:site_name" content="{{ shop.name }}">
    <meta property="og:url" content="{{ canonical_url }}">
    <meta property="og:title" content="{{ page_title }}">
    {%- if page_description -%}
      <meta property="og:description" content="{{ page_description | escape }}">
    {%- endif -%}
    {%- if template == 'product' and product.featured_image -%}
      <meta property="og:image" content="{{ product.featured_image | img_url: 'large' }}">
      <meta property="og:image:secure_url" content="{{ product.featured_image | img_url: 'large' | replace: 'http://', 'https://' }}">
      <meta property="og:image:width" content="600">
      <meta property="og:image:height" content="600">
    {%- endif -%}
    
    <!-- Twitter Card data -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="{{ page_title }}">
    {%- if page_description -%}
      <meta name="twitter:description" content="{{ page_description | escape }}">
    {%- endif -%}
    {%- if template == 'product' and product.featured_image -%}
      <meta name="twitter:image" content="{{ product.featured_image | img_url: 'large' }}">
    {%- endif -%}

    <!-- Enhanced SEO meta tags -->
    {% if template.name == 'product' %}
      <meta property="product:price:amount" content="{{ product.price | money_without_currency }}">
      <meta property="product:price:currency" content="{{ shop.currency }}">
      {% if product.available %}
        <meta property="product:availability" content="in stock">
      {% else %}
        <meta property="product:availability" content="out of stock">
      {% endif %}
    {% endif %}

    {% include 'social-meta-tags' %}
    
    <!-- Critical CSS (inline for performance) -->
    {% include 'css-variables' %}
    <style>
      /* Critical above-the-fold CSS */
      html { font-family: 'Poppins', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; }
      .no-js { display: none !important; }
      body { margin: 0; padding: 0; line-height: 1.6; }
      .skip-to-content { 
        position: absolute; 
        top: -40px; 
        left: 6px; 
        background: #000; 
        color: #fff; 
        padding: 8px; 
        text-decoration: none; 
        border-radius: 4px;
        z-index: 100000;
      }
      .skip-to-content:focus { top: 6px; }
      .container { max-width: 1200px; margin: 0 auto; padding: 0 15px; }
      .sr-only { 
        position: absolute !important; 
        width: 1px !important; 
        height: 1px !important; 
        padding: 0 !important; 
        margin: -1px !important; 
        overflow: hidden !important; 
        clip: rect(0,0,0,0) !important; 
        border: 0 !important; 
      }
      /* Loading spinner */
      .page-loading { 
        position: fixed; 
        top: 0; 
        left: 0; 
        width: 100%; 
        height: 100%; 
        background: rgba(255,255,255,0.9); 
        z-index: 9999; 
        display: flex; 
        align-items: center; 
        justify-content: center;
      }
      .loading-spinner { 
        width: 40px; 
        height: 40px; 
        border: 4px solid #f3f3f3; 
        border-top: 4px solid {{ settings.color_accent | default: '#333' }}; 
        border-radius: 50%; 
        animation: spin 1s linear infinite; 
      }
      @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
    </style>
    
    <!-- Optimized font loading strategy -->
    <link rel="preload" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500&display=swap" as="style">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500&display=swap" media="print" onload="this.media='all'">
    <!-- Load non-critical fonts asynchronously -->
    <link rel="preload" href="https://fonts.googleapis.com/css2?family=Poppins:wght@600;700;800;900&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <noscript>
      <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500&display=swap" rel="stylesheet">
      <link href="https://fonts.googleapis.com/css2?family:Poppins:wght@600;700;800;900&display=swap" rel="stylesheet">
    </noscript>
    
    <!-- Enhanced resource loading strategy -->
    <link rel="preload" href="{{ 'style.css' | asset_url }}" as="style" onload="this.onload=null;this.rel='stylesheet';performance.mark('mainCssLoaded')">
    <noscript><link rel="stylesheet" href="{{ 'style.css' | asset_url }}"></noscript>
    
    <!-- Resource hints for dynamic imports -->
    <link rel="modulepreload" href="{{ 'layout.theme.js' | asset_url }}">
    {% if template.name == 'product' %}
      <link rel="modulepreload" href="{{ 'product-template.js' | asset_url }}">
    {% endif %}
    
    <!-- Priority Hints -->
    <meta http-equiv="Priority-Hints" content="on">
    
    <!-- Lazy loading configuration with priority hints -->
    <script>
      // Enhanced lazy loading configuration with error handling and performance optimization
      document.addEventListener('DOMContentLoaded', function() {
        const lazyElements = document.querySelectorAll('[loading="lazy"], [data-lazy="true"]');
        const imageObserver = 'loading' in HTMLImageElement.prototype;
        const ioSupported = 'IntersectionObserver' in window;
        
        function loadElement(element) {
          try {
            if (element.tagName.toLowerCase() === 'img') {
              if (element.dataset.src) {
                element.src = element.dataset.src;
              }
              if (element.dataset.srcset) {
                element.srcset = element.dataset.srcset;
              }
              element.setAttribute('decoding', 'async');
            } else if (element.tagName.toLowerCase() === 'iframe') {
              if (element.dataset.src) {
                element.src = element.dataset.src;
              }
            }
            
            // Handle background images
            if (element.dataset.background) {
              element.style.backgroundImage = `url('${element.dataset.background}')`;
            }
            
            element.classList.add('loaded');
            element.dispatchEvent(new CustomEvent('lazyloaded'));
          } catch (error) {
            console.warn('Error loading lazy element:', error);
            // Retry once after a short delay
            setTimeout(() => {
              try {
                loadElement(element);
              } catch (retryError) {
                console.error('Failed to load element after retry:', retryError);
              }
            }, 1000);
          }
        }

        if (imageObserver) {
          // Native lazy loading with fallback
          lazyElements.forEach(element => {
            element.setAttribute('loading', 'lazy');
            if (element.tagName.toLowerCase() === 'img') {
              // Preload critical images
              if (element.hasAttribute('data-critical')) {
                element.removeAttribute('loading');
                loadElement(element);
              }
            }
          });
        } else if (ioSupported) {
          // Intersection Observer fallback with enhanced options
          const lazyLoader = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                const element = entry.target;
                loadElement(element);
                observer.unobserve(element);
              }
            });
          }, {
            root: null,
            rootMargin: '50px 0px', // Start loading slightly before visible
            threshold: 0.1 // Load when even slightly visible
          });

          lazyElements.forEach(element => {
            if (element.hasAttribute('data-critical')) {
              loadElement(element);
            } else {
              lazyLoader.observe(element);
            }
          });
        } else {
          // Ultimate fallback for older browsers
          lazyElements.forEach(loadElement);
        }
        
        // Cleanup unused data attributes
        setTimeout(() => {
          lazyElements.forEach(element => {
            if (element.classList.contains('loaded')) {
              ['src', 'srcset', 'background'].forEach(attr => {
                if (element.dataset[attr]) {
                  delete element.dataset[attr];
                }
              });
            }
          });
        }, 5000);
      });
    </script>
    
    <!-- Conditional CSS loading -->
    {% if template.name == 'product' %}
      <link rel="preload" href="{{ 'smoothness-jquery-ui.css' | asset_url }}" as="style" onload="this.onload=null;this.rel='stylesheet'">
    {% endif %}
    
    {% include 'style-tags', layout: 'theme' %}
    
    <!-- Third-party CSS with performance optimization -->
    <link rel="preload" href="https://www.katapult.com/plugin/css/katapult.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <link rel="preload" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'" crossorigin="anonymous">
    
    <!-- Structured Data for SEO -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Organization",
      "name": {{ shop.name | json }},
      "url": {{ shop.url | json }},
      {% if settings.favicon %}
        "logo": {{ settings.favicon | img_url: 'master' | prepend: 'https:' | json }},
      {% endif %}
      "sameAs": [
        {% if settings.social_facebook_link != blank %}"{{ settings.social_facebook_link }}",{% endif %}
        {% if settings.social_twitter_link != blank %}"{{ settings.social_twitter_link }}",{% endif %}
        {% if settings.social_instagram_link != blank %}"{{ settings.social_instagram_link }}"{% endif %}
      ]
    }
    </script>
    
    {% if template.name == 'product' %}
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Product",
      "name": {{ product.title | json }},
      "description": {{ product.description | strip_html | truncate: 300 | json }},
      "image": [
        {% for image in product.images limit: 3 %}
          {{ image | img_url: 'master' | prepend: 'https:' | json }}{% unless forloop.last %},{% endunless %}
        {% endfor %}
      ],
      "brand": {
        "@type": "Brand",
        "name": {{ product.vendor | json }}
      },
      "offers": {
        "@type": "Offer",
        "url": {{ shop.url | append: product.url | json }},
        "priceCurrency": {{ shop.currency | json }},
        "price": "{{ product.price | money_without_currency | remove: ',' }}",
        "availability": "{% if product.available %}https://schema.org/InStock{% else %}https://schema.org/OutOfStock{% endif %}",
        "seller": {
          "@type": "Organization",
          "name": {{ shop.name | json }}
        }
      }
    }
    </script>
    {% endif %}

    <!-- Enhanced theme configuration -->
    <script>
      // Remove no-js class immediately
      document.documentElement.className = document.documentElement.className.replace('no-js', 'js');
      
      // Enhanced theme object with performance monitoring
      window.theme = {
        strings: {
          addToCart: {{ 'products.product.add_to_cart' | t | json }},
          soldOut: {{ 'products.product.sold_out' | t | json }},
          unavailable: {{ 'products.product.unavailable' | t | json }},
          loading: {{ 'general.loading' | t | default: 'Loading...' | json }}
        },
        moneyFormat: {{ shop.money_format | json }},
        shopCurrency: {{ shop.currency | json }},
        routes: {
          cart: '{{ routes.cart_url }}',
          cartAdd: '{{ routes.cart_add_url }}',
          cartChange: '{{ routes.cart_change_url }}',
          search: '{{ routes.search_url }}',
          predictiveSearch: '{{ routes.predictive_search_url }}'
        },
        settings: {
          predictiveSearchEnabled: {{ settings.predictive_search_enabled | default: false }},
          cartType: {{ settings.cart_type | default: 'drawer' | json }},
          enableQuickView: {{ settings.enable_quick_view | default: false }}
        }
      };
      
      // Enhanced Performance monitoring
      if ('performance' in window) {
        window.theme.performance = {
          navigationStart: performance.timeOrigin,
          metrics: {},
          measure: function(label, startMark, endMark) {
            performance.measure(label, startMark, endMark);
            const entries = performance.getEntriesByName(label);
            this.metrics[label] = entries[entries.length - 1].duration;
          }
        };
        
        // Core Web Vitals monitoring
        if ('PerformanceObserver' in window) {
          // LCP monitoring
          new PerformanceObserver((entryList) => {
            const entries = entryList.getEntries();
            const lastEntry = entries[entries.length - 1];
            window.theme.performance.metrics.LCP = lastEntry.renderTime || lastEntry.loadTime;
          }).observe({entryTypes: ['largest-contentful-paint']});

          // FID monitoring
          new PerformanceObserver((entryList) => {
            const entries = entryList.getEntries();
            const firstEntry = entries[0];
            window.theme.performance.metrics.FID = firstEntry.processingStart - firstEntry.startTime;
          }).observe({entryTypes: ['first-input']});

          // CLS monitoring
          let clsValue = 0;
          new PerformanceObserver((entryList) => {
            for (const entry of entryList.getEntries()) {
              if (!entry.hadRecentInput) {
                clsValue += entry.value;
                window.theme.performance.metrics.CLS = clsValue;
              }
            }
          }).observe({entryTypes: ['layout-shift']});
        }

        // Mark key points for performance measurement
        performance.mark('themeJsStart');
      }
      
      // Feature detection
      window.theme.supports = {
        webp: (function() {
          var canvas = document.createElement('canvas');
          return canvas.toDataURL('image/webp').indexOf('data:image/webp') === 0;
        })(),
        intersectionObserver: 'IntersectionObserver' in window,
        serviceWorker: 'serviceWorker' in navigator
      };
    </script>

    <!-- Load jQuery early but async for better performance -->
    <script>
      // Modern script loading with fallback
      function loadScript(src, callback) {
        var script = document.createElement('script');
        script.src = src;
        script.async = true;
        if (callback) script.onload = callback;
        document.head.appendChild(script);
      }
      
      // Load jQuery with CDN fallback
      if (!window.jQuery) {
        loadScript('https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.0/jquery.min.js', function() {
          if (!window.jQuery) {
            console.warn('CDN jQuery failed to load, trying local fallback');
            loadScript('{{ "jquery-3.7.0.min.js" | asset_url }}');
          }
        });
      }
    </script>
    
    {% include 'script-tags', layout: 'theme' %}
    {% include 'affirm' %}
    {% render 'mailchimp' %}

    <!-- Enhanced analytics and tracking -->
    {% capture cfh %}{{ content_for_header }}{% endcapture %}
    {% include 'cfh-optimized' with cfh %}
    
    <!-- Consolidated tracking scripts -->
    {% include 'google-tags' %}
    {% include 'clarity' %}
    {% include 'omega_multi_pixel' %}
    {% include 'facebook-pixel' %}
    
    <!-- Load analytics with better performance -->
    <script>
      // Umami analytics with error handling
      (function() {
        var script = document.createElement('script');
        script.defer = true;
        script.src = 'https://cloud.umami.is/script.js';
        script.setAttribute('data-website-id', 'b80c28c5-baee-4fc0-a8e6-31cc239e039a');
        script.onerror = function() {
          console.warn('Umami analytics failed to load');
        };
        document.head.appendChild(script);
      })();
    </script>

    {% render 'rapid-search-settings' %}
    
    <!-- Enhanced Service Worker implementation -->
    {% if settings.enable_service_worker %}
    <script>
      if ('serviceWorker' in navigator) {
        // Defer service worker registration after load
        window.addEventListener('load', function() {
          // Register service worker with a scope
          navigator.serviceWorker.register('/sw.js', {
            scope: '/',
            updateViaCache: 'none'
          }).then(function(registration) {
            console.log('SW registered - Scope:', registration.scope);
            
            // Check for updates
            registration.addEventListener('updatefound', function() {
              const newWorker = registration.installing;
              newWorker.addEventListener('statechange', function() {
                if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                  // New content is available, notify user
                  if (window.confirm('New content is available! Reload to update?')) {
                    window.location.reload();
                  }
                }
              });
            });
          }).catch(function(error) {
            console.error('SW registration failed:', error);
          });

          // Handle service worker updates
          let refreshing = false;
          navigator.serviceWorker.addEventListener('controllerchange', function() {
            if (!refreshing) {
              refreshing = true;
              window.location.reload();
            }
          });
        });
      }
    </script>
    {% endif %}
    
  </head>
  
  <body id="{{ page_title | handle }}" 
        class="template-{{ template.name | handle }}{% if customer %} customer-logged-in{% endif %}{% if template.directory %} template-{{ template.directory }}{% endif %}{% if template.suffix %} template-{{ template.suffix }}{% endif %}"
        data-template="{{ template.name }}"
        data-shop-id="{{ shop.id }}"
        itemscope itemtype="https://schema.org/WebPage">
    
    <!-- Accessibility: Skip to content link -->
    <a class="skip-to-content" href="#MainContent">{{ 'general.accessibility.skip_to_content' | t | default: 'Skip to content' }}</a>
    
    <!-- Loading indicator -->
    <div class="page-loading" id="page-loading" aria-hidden="true">
      <div class="loading-spinner"></div>
      <span class="sr-only">{{ 'general.loading' | t | default: 'Loading...' }}</span>
    </div>

    <!-- Enhanced header with better semantic structure -->
    <div class="site-wrapper">
      {% section 'header' %}
      
      <!-- Enhanced YMM integration with better accessibility -->
      <div class="page-width ymm_app container" id="ymm_searchbox_cont" role="search" aria-label="Search by vehicle">
        <div id="ymm_data" data-searchbox-style="horizontal" style="display: none;">
          Search By Year, Make and Model
        </div>
      </div>

      <!-- Main content with better semantic structure -->
      <main role="main" id="MainContent" class="main-content" itemscope itemtype="https://schema.org/WebPageElement">
        <!-- Emergency content fallback -->
        <div id="emergency-content" style="display: none;">
          <div class="container text-center py-5">
            <h1>{{ shop.name }}</h1>
            <p>We're currently updating our website. Please try refreshing the page.</p>
            {% if template == 'product' %}
              <div class="product-emergency-data" hidden
                   data-product-title="{{ product.title | escape }}"
                   data-product-price="{{ product.price | money }}"
                   data-product-url="{{ product.url }}">
              </div>
            {% endif %}
          </div>
        </div>
        
        <script>
          // Emergency content handling
          window.addEventListener('error', function(e) {
            if (e.target.tagName === 'SECTION' || e.target.closest('section')) {
              const emergency = document.getElementById('emergency-content');
              if (emergency) emergency.style.display = 'block';
            }
          }, true);
        </script>
        
        <!-- Enhanced homepage section loading -->
        {% if template == 'index' %}
          {% section 'homepage-selection' %}
          
          <!-- Preload critical homepage resources -->
          <script>
            // Preload critical homepage resources
            if ('requestIdleCallback' in window) {
              requestIdleCallback(function() {
                // Preload next likely pages
                var preloadLinks = ['/collections', '/pages/about'];
                preloadLinks.forEach(function(url) {
                  var link = document.createElement('link');
                  link.rel = 'prefetch';
                  link.href = url;
                  document.head.appendChild(link);
                });
              });
            }
          </script>
        {% endif %}
        
        {% include 'custom-card' %}
        {{ content_for_layout }}
      </main>
    </div>

    <!-- Enhanced footer -->
    {% section 'footer' %}

    <!-- Optimized script loading -->
    <script>
      // Load scripts efficiently
      document.addEventListener('DOMContentLoaded', function() {
        // Hide loading indicator
        var loader = document.getElementById('page-loading');
        if (loader) {
          loader.style.display = 'none';
        }
        
        // Load non-critical scripts
        var scriptsToLoad = [
          '{{ "option_selection.js" | asset_url }}',
          'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.8.1/slick.min.js'
        ];
        
        {% if template.name == 'product' %}
          scriptsToLoad.push('{{ "jquery.zoom.min.js" | asset_url }}');
        {% endif %}
        
        // Load scripts progressively
        function loadNextScript(index) {
          if (index < scriptsToLoad.length) {
            loadScript(scriptsToLoad[index], function() {
              loadNextScript(index + 1);
            });
          } else {
            // All scripts loaded, initialize functionality
            initializeTheme();
          }
        }
        
        loadNextScript(0);
      });
      
      // Enhanced theme initialization
      function initializeTheme() {
        // Enhanced product slider with error handling
        {% if template contains "product" %}
        if (typeof $ !== 'undefined' && $('.product-slider').length) {
          var interval = setInterval(function() {
            var slider = $('.product-slider.slick-slider');
            if (slider.length) {
              clearInterval(interval);
              slider.removeClass('slick-slider');
            }
          }, 100);
          
          // Clear interval after 5 seconds to prevent infinite loop
          setTimeout(function() {
            clearInterval(interval);
          }, 5000);
        }
        {% endif %}
        
        // Enhanced swatch functionality
        if (typeof $ !== 'undefined') {
          $(document).on('change', '.swatch :radio', function() {
            var optionIndex = $(this).closest('.swatch').attr('data-option-index');
            var optionValue = $(this).val();
            $(this)
              .closest('form')
              .find('.single-option-selector')
              .eq(optionIndex)
              .val(optionValue)
              .trigger('change');
          });
          
          // Enhanced quick view functionality
          $(document).on('click', '.quick-view .close-window', function() {
            $('.quick-view').switchClass('open-in', 'open-out');
          });
          
          // Enhanced product slider with better responsive settings
          if ($('.product_main').length) {
            $('.product_main').slick({
              dots: false,
              infinite: true,
              speed: 300,
              slidesToShow: 3,
              slidesToScroll: 1,
              arrows: true,
              lazyLoad: 'ondemand',
              responsive: [
                {
                  breakpoint: 1024,
                  settings: {
                    slidesToShow: 3,
                    slidesToScroll: 1,
                    dots: true
                  }
                },
                {
                  breakpoint: 768,
                  settings: {
                    slidesToShow: 2,
                    slidesToScroll: 1
                  }
                },
                {
                  breakpoint: 480,
                  settings: {
                    slidesToShow: 1,
                    slidesToScroll: 1,
                    arrows: false,
                    dots: true
                  }
                }
              ]
            });
          }
        }
        
        // Shopify configuration with error handling
        try {
          var Shopify = Shopify || {};
          if (typeof Storage !== 'undefined') {
            localStorage.setItem('Shopify_store_url', Shopify.shop);
            localStorage.setItem('Shopify_store_id', Shopify.theme.id);
          }
        } catch (e) {
          console.warn('Local storage not available');
        }
        
        // Performance tracking
        if ('performance' in window && 'timing' in performance) {
          window.addEventListener('load', function() {
            setTimeout(function() {
              var loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
              if (typeof gtag !== 'undefined') {
                gtag('event', 'timing_complete', {
                  name: 'load',
                  value: loadTime
                });
              }
            }, 0);
          });
        }
      }
    </script>

    <!-- Enhanced integrations -->
    {% render 'paytomorrow' %}
    {% include 'katapult' %}
    {% render 'chat-broadly' %}
    {% render 'rps-csb' %}
    
    <!-- SEO and verification -->
    <meta name="google-site-verification" content="h3-WiAJW3yGCrs7CSN_q-D0BvvgbBDrx_VEYqXrCEqs">
    
    <!-- Enhanced error handling -->
    <script>
      (function() {
        // Enhanced error categorization and handling
        const errorTypes = {
          NETWORK: 'network_error',
          SCRIPT: 'script_error',
          RESOURCE: 'resource_error',
          RUNTIME: 'runtime_error'
        };

        function categorizeError(error) {
          if (error instanceof TypeError) return errorTypes.RUNTIME;
          if (error instanceof ReferenceError) return errorTypes.SCRIPT;
          if (error instanceof URIError) return errorTypes.RESOURCE;
          if (error.message && error.message.includes('network')) return errorTypes.NETWORK;
          return 'unknown_error';
        }

        // Global error handling with retry mechanism
        window.addEventListener('error', function(e) {
          const errorType = categorizeError(e.error);
          console.error(`JavaScript ${errorType}:`, {
            message: e.error.message,
            stack: e.error.stack,
            type: errorType
          });

          // Enhanced analytics reporting
          if (typeof gtag !== 'undefined') {
            gtag('event', 'exception', {
              description: e.error.toString(),
              fatal: false,
              error_type: errorType
            });
          }

          // Automatic retry for network errors
          if (errorType === errorTypes.NETWORK && e.target && e.target.src) {
            const retriesKey = `retry_${e.target.src}`;
            const retries = parseInt(sessionStorage.getItem(retriesKey) || '0');
            if (retries < 3) {
              sessionStorage.setItem(retriesKey, (retries + 1).toString());
              setTimeout(() => {
                e.target.src = e.target.src + '?retry=' + Date.now();
              }, 1000 * Math.pow(2, retries)); // Exponential backoff
            }
          }
        });
        
        // Enhanced Promise rejection handling
        window.addEventListener('unhandledrejection', function(e) {
          const error = e.reason;
          const errorType = categorizeError(error);
          
          console.error(`Unhandled promise rejection (${errorType}):`, {
            message: error.message,
            stack: error.stack,
            type: errorType
          });

          if (typeof gtag !== 'undefined') {
            gtag('event', 'exception', {
              description: 'Promise Rejection: ' + error.toString(),
              fatal: false,
              error_type: 'promise_' + errorType
            });
          }

          e.preventDefault();
        });

        // Performance error monitoring
        if ('performance' in window) {
          const observer = new PerformanceObserver((list) => {
            for (const entry of list.getEntries()) {
              if (entry.duration > 1000) { // Long task detection
                console.warn('Long task detected:', {
                  name: entry.name,
                  duration: entry.duration,
                  startTime: entry.startTime
                });
              }
            }
          });
          
          observer.observe({ entryTypes: ['longtask', 'resource'] });
        }
      })();
    </script>
    
  </body>
</html>