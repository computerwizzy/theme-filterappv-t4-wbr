<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<!-- <div>
		<div class="cd">
			<div class="cd__unit-group">
				<div class="cd__unit">
					<div class="cd__digits">
						<div class="cd__digit" data-col>
							<div data-pos="next">-</div>
							<div data-pos="prev">-</div>
						</div>
						<div class="cd__digit" data-col>
							<div data-pos="next">-</div>
							<div data-pos="prev">-</div>
						</div>
					</div>
					<div class="cd__unit-label">Hour(s)</div>
				</div>
				<div class="cd__unit">
					<div class="cd__digits">
						<div class="cd__digit" data-col>
							<div data-pos="next">-</div>
							<div data-pos="prev">-</div>
						</div>
						<div class="cd__digit" data-col>
							<div data-pos="next">-</div>
							<div data-pos="prev">-</div>
						</div>
					</div>
					<div class="cd__unit-label">Minute(s)</div>
				</div>
				<div class="cd__unit">
					<div class="cd__digits">
						<div class="cd__digit" data-col>
							<div data-pos="next">-</div>
							<div data-pos="prev">-</div>
						</div>
						<div class="cd__digit" data-col>
							<div data-pos="next">-</div>
							<div data-pos="prev">-</div>
						</div>
					</div>
					<div class="cd__unit-label">Second(s)</div>
				</div>
			</div>
		</div>
</div> -->
{% if section.settings.enable_section %}
<section class="about-banner">
    {% include 'responsive-image' with
        image: section.settings.bg_img,
        image.alt: section.settings.title,
        max_width: 1600,
        max_height: 1600
    %}
    <div class="container">
        <div class="row">
            <div class="col-12 about-content">
                <h2>{{ section.settings.title }}</h2>
                <p class="sub_line">{{ section.settings.sub_line }}</p>
            </div>
        </div>
    </div>
</section>
{% endif %}
<style>

.cd,
.cd__unit-group,
.cd__digits {
	display: flex;
	justify-content: center;
}
.cd {
	flex-wrap: wrap;
	text-align: center;
}
.cd__unit-group {
	margin-bottom: 1.5em;
}
.cd__unit {
	font-size: 3.75em;
	line-height: 1;
	margin: 0 0.75rem;
	width: 2ch;
}
.cd__digits,
.cd__digit {
	position: relative;
}
.cd__digits {
	font-weight: bold;
	height: 3.75rem;
	margin-bottom: 0.5rem;
	overflow: hidden;
}
.cd__digit {
	width: 1ch;
	z-index: -1;
}
.cd__digit--roll-in {
	animation: rollIn 2s ease-in-out;
}
.cd__next-digit-fade {
	animation: fade 2s ease-in-out;
}
.cd__prev-digit-fade {
	animation: fade 2s ease-in-out reverse;
}
.cd__unit-label {
	font-size: 0.75rem;
	line-height: 1;
}
.cd__progress {
	width: 100%;
}
@keyframes rollIn {
	0% {
		transform: translateY(-100%);
	}
	100% {
		transform: translateY(0);
	}
}
@keyframes fade {
	0% {
		opacity: 0;
	}
	100% {
		opacity: 1;
	}
}


</style>
<script>
  $(document).ready(function(){
 window.addEventListener("DOMContentLoaded",() => {
	const uec = new UnixEpochalypseCountdown(".cd");
	const infoBtn = document.getElementById("info-btn");

	if (infoBtn)
		infoBtn.addEventListener("click",jumpToHelp);
});

function jumpToHelp() {
	const info = document.getElementById("info");

	if (info)
 {
		window.scrollTo({
			top: info.offsetTop,
			left: 0,
			behavior: "smooth"
		});
	}
}

class UnixEpochalypseCountdown {
	constructor(qs) {
		this.el = document.querySelector(qs);
		this.time = [];
		this.animTimeout = null;
		this.updateTimeout = null;
		this.update();
	}
	getProgressInSeconds() {
		if (typeof moment === "function") {
			const now = moment();
			const ms = Math.ceil(now.valueOf() / 1e3);

			return ms >> 0;
		} else {
			return 0;
		}
	}
	getTimeLeft() {
		let timeLeft = {
			h: 0,
			m: 0,
			s: 0
		};

		if (typeof moment === "function") {
			const later = moment((2**31 - 1) * 1e3);
			const now = moment();
			const diff = moment.duration(later.diff(now));

			if (diff.valueOf() >= 0) {
				timeLeft.h += diff.hours();
				timeLeft.m += diff.minutes();
				timeLeft.s += diff.seconds();
			}
		}

		return timeLeft;
	}
	clearAnimations() {
		if (this.el) {
			const colAnimsToClear = this.el.querySelectorAll("[data-col]");

			Array.from(colAnimsToClear).forEach(a => {
				a.classList.remove("cd__digit--roll-in");
			});

			const posAnimsToClear = this.el.querySelectorAll("[data-pos]");

			Array.from(posAnimsToClear).forEach(a => {
				a.classList.remove("cd__next-digit-fade","cd__prev-digit-fade");
			});
		}
	}
	update(doAnimations = false) {
		// start with all dashes
		if (!this.time.length) {
			let digitCount = 12;

			while (digitCount--)
				this.time.push("-");
		}
		// update data
		const display = this.getTimeLeft();
		const displayDigits = [];

		for (let v in display) {
			const digits = `${display[v]}`.split("");
			// add zero to single digits
			if (digits.length < 2)
				digits.unshift("0");

			displayDigits.push(...digits);
		}
		// update display
		const cols = this.el.querySelectorAll("[data-col]");

		if (cols) {
			Array.from(cols).forEach((c,i) => {
				const digit = displayDigits[i];

				if (digit !== this.time[i]) {
					const next = c.querySelector(`[data-pos="next"]`);
					const prev = c.querySelector(`[data-pos="prev"]`);

					if (doAnimations === true) {
						c.classList.add("cd__digit--roll-in");
						next.classList.add("cd__next-digit-fade");
						prev.classList.add("cd__prev-digit-fade");
					}

					next.innerHTML = digit;
					prev.innerHTML = this.time[i];
				}
			});
		}

		this.time = displayDigits;
		// progress in seconds
		const progress = this.el.querySelector("[data-progress]");

		if (progress)
			progress.innerHTML = this.getProgressInSeconds();
		// loop
		clearTimeout(this.animTimeout);
		this.animTimeout = setTimeout(this.clearAnimations.bind(this),500);

		clearTimeout(this.updateTimeout);
		this.updateTimeout = setTimeout(this.update.bind(this,true),1e3);
	}
}
    });
</script>
{% schema %}
  {
    "name": "About Banner",
    "settings": [
        {
            "type": "checkbox",
            "id": "enable_section",
            "label": "Enable Section?"
        },
        {
            "type": "image_picker",
            "id": "bg_img",
            "label": "Background Image"
        },
        {
            "type": "text",
            "id": "title",
            "label": "Title"
        },
         {
            "type": "textarea",
            "id": "sub_line",
            "label": "Sub Line"
        }
    ]
  }
{% endschema %}